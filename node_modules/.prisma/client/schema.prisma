// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma schema for AgentPay production database
// Production ready with PostgreSQL support

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String
  password      String? // Nullable for OAuth users
  provider      String   @default("email") // email, google, github
  googleId      String?  @unique
  githubId      String?  @unique
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Subscription info
  subscriptionPlan     String    @default("sandbox") // sandbox, builder, team
  subscriptionStatus   String    @default("active") // active, inactive, cancelled
  stripeCustomerId     String?   @unique
  subscriptionTrialEnd DateTime?

  // Relations
  apiKeys            ApiKey[]
  sessions           Session[]
  passwordResets     PasswordReset[]
  emailVerifications EmailVerification[]
  wallets            Wallet[]

  @@map("users")
}

// API Key Management
model ApiKey {
  id          String    @id @default(uuid())
  userId      String
  name        String
  key         String    @unique
  prefix      String
  secret      String
  lastUsed    DateTime?
  usageCount  Int       @default(0)
  createdAt   DateTime  @default(now())
  isActive    Boolean   @default(true)
  revokedAt   DateTime?
  permissions String    @default("authorize,confirm,refund")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// Session Management (for web dashboard)
model Session {
  id           String   @id @default(uuid())
  userId       String
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  lastActivity DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Password Reset
model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

// Email Verification
model EmailVerification {
  id        String   @id @default(uuid())
  userId    String
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

// Wallet System (existing)
model Wallet {
  id         String   @id @default(uuid())
  userId     String? // Optional link to user
  balanceSat Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  agents Agent[]

  @@map("wallets")
}

// Agent System (existing)
model Agent {
  id            String   @id @default(uuid())
  walletId      String
  limitSat      Int
  spentTodaySat Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("agents")
}

// Transaction Logging
model Transaction {
  id              String   @id @default(uuid())
  userId          String?
  apiKeyId        String?
  agentId         String?
  type            String // authorize, confirm, refund, transfer
  amount          Int // In satoshis or cents
  currency        String   @default("USD")
  description     String?
  status          String // pending, completed, failed, cancelled
  stripePaymentId String?
  metadata        String? // Store additional data as JSON string
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("transactions")
}

// Audit Log
model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  apiKeyId  String?
  action    String // login, api_key_created, payment_authorized, etc.
  resource  String? // Resource affected
  metadata  String? // Additional context as JSON string
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}
